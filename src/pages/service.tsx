import React, { useState, useEffect } from 'react';
import type { NextPage } from 'next';
import Layout from '../components/Layout';

const ServicesPage: NextPage = () => {
    const [expandedServices, setExpandedServices] = useState<{ [key: number]: boolean }>({});
    const [openFaq, setOpenFaq] = useState<number | null>(null);

    const services = [
        {
            icon: 'üñ•Ô∏è',
            title: 'Ïõπ Í∞úÎ∞ú',
            description: 'Ìö®Í≥ºÏ†ÅÏù∏ Ïò®ÎùºÏù∏ Ï°¥Ïû¨Í∞êÏùÑ ÏúÑÌïú ÎßûÏ∂§Ìòï Ïõπ ÏÜîÎ£®ÏÖò',
            features: [
                'Î∞òÏùëÌòï ÏõπÏÇ¨Ïù¥Ìä∏ Í∞úÎ∞ú',
                'Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Í∞úÎ∞ú',
                'CMS & ÏΩòÌÖêÏ∏† Í¥ÄÎ¶¨',
                'e-Ïª§Î®∏Ïä§ ÏÜîÎ£®ÏÖò',
            ],
            technologies: ['React', 'Next.js', 'Vue', 'Node.js', 'PHP', 'MySQL', 'MongoDB']
        },
        {
            icon: 'üì±',
            title: 'Ïï± Í∞úÎ∞ú',
            description: 'ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†ÅÏù∏ Î™®Î∞îÏùº Ïï±ÏúºÎ°ú Í≥†Í∞ùÍ≥º Ïó∞Í≤∞ÌïòÏÑ∏Ïöî',
            features: [
                'iOS Ïï± Í∞úÎ∞ú',
                'Android Ïï± Í∞úÎ∞ú',
                'ÌÅ¨Î°úÏä§ ÌîåÎû´Ìèº Ïï±',
                'ÌïòÏù¥Î∏åÎ¶¨Îìú Ïï±'
            ],
            technologies: ['Flutter', 'React Native', 'Swift', 'Kotlin', 'Firebase']
        },
        {
            icon: 'üé®',
            title: 'UI/UX ÎîîÏûêÏù∏',
            description: 'Îß§Î†•Ï†ÅÏù¥Î©¥ÏÑúÎèÑ ÏÇ¨Ïö©ÌïòÍ∏∞ Ïâ¨Ïö¥ ÎîîÏßÄÌÑ∏ Í≤ΩÌóò Ï†úÍ≥µ',
            features: [
                'ÏÇ¨Ïö©Ïûê Í≤ΩÌóò(UX) ÎîîÏûêÏù∏',
                'ÏÇ¨Ïö©Ïûê Ïù∏ÌÑ∞ÌéòÏù¥Ïä§(UI) ÎîîÏûêÏù∏',
                'Î∞òÏùëÌòï ÎîîÏûêÏù∏',
                'ÌîÑÎ°úÌÜ†ÌÉÄÏù¥Ìïë Î∞è ÏôÄÏù¥Ïñ¥ÌîÑÎ†àÏù¥Î∞ç'
            ],
            technologies: ['Figma', 'Adobe XD', 'Sketch', 'InVision', 'Principle']
        },
        {
            icon: '‚öôÔ∏è',
            title: 'Í∏∞Ïà† Ïª®ÏÑ§ÌåÖ',
            description: 'Ï†ÑÎûµÏ†Å Í∏∞Ïà† Î∞©Ìñ•ÏùÑ ÌÜµÌïú ÎπÑÏ¶àÎãàÏä§ ÏÑ±Ïû• ÏßÄÏõê',
            features: [
                'Í∏∞Ïà† Ï†ÑÎûµ Í∞úÎ∞ú',
                'ÎîîÏßÄÌÑ∏ Ìä∏ÎûúÏä§Ìè¨Î©îÏù¥ÏÖò',
                'Í∏∞Ïà† Ïä§ÌÉù ÌèâÍ∞Ä Î∞è Ï∂îÏ≤ú',
                'ÏãúÏä§ÌÖú ÏïÑÌÇ§ÌÖçÏ≤ò ÏÑ§Í≥Ñ'
            ],
            technologies: ['ÌÅ¥ÎùºÏö∞Îìú', 'ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§', 'DevOps', 'Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù', 'ÏãúÏä§ÌÖú ÌÜµÌï©']
        }
    ];

    const processSteps = [
        {
            number: '01',
            title: 'ÏÉÅÎã¥ Î∞è Í∏∞Ìöç',
            description: 'ÎπÑÏ¶àÎãàÏä§ Î™©ÌëúÏôÄ ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ Î∂ÑÏÑùÌïòÏó¨ ÏµúÏ†ÅÏùò ÏÜîÎ£®ÏÖòÏùÑ Í≥ÑÌöçÌï©ÎãàÎã§.'
        },
        {
            number: '02',
            title: 'ÎîîÏûêÏù∏ Î∞è ÌîÑÎ°úÌÜ†ÌÉÄÏûÖ',
            description: 'ÏãúÍ∞ÅÏ†Å ÏïÑÏù¥Îç¥Ìã∞Ìã∞Î•º Íµ¨Ï∂ïÌïòÍ≥† ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùÑ ÏÑ§Í≥ÑÌï©ÎãàÎã§.'
        },
        {
            number: '03',
            title: 'Í∞úÎ∞ú Î∞è Íµ¨ÌòÑ',
            description: 'ÏµúÏã† Í∏∞Ïà†ÏùÑ ÌôúÏö©ÌïòÏó¨ ÏïàÏ†ïÏ†ÅÏù¥Í≥† ÌôïÏû• Í∞ÄÎä•Ìïú ÏÜîÎ£®ÏÖòÏùÑ Íµ¨Ï∂ïÌï©ÎãàÎã§.'
        },
        {
            number: '04',
            title: 'ÌÖåÏä§Ìä∏ Î∞è ÏµúÏ†ÅÌôî',
            description: 'Ï≤†Ï†ÄÌïú ÌÖåÏä§Ìä∏Î•º ÌÜµÌï¥ ÌíàÏßàÏùÑ Î≥¥Ïû•ÌïòÍ≥† ÏÑ±Îä•ÏùÑ ÏµúÏ†ÅÌôîÌï©ÎãàÎã§.'
        },
        {
            number: '05',
            title: 'Îü∞Ïπ≠ Î∞è ÏßÄÏõê',
            description: 'ÏÑ±Í≥µÏ†ÅÏù∏ Ï∂úÏãú ÌõÑ ÏßÄÏÜçÏ†ÅÏù∏ ÏßÄÏõêÍ≥º Ïú†ÏßÄÎ≥¥ÏàòÎ•º Ï†úÍ≥µÌï©ÎãàÎã§.'
        }
    ];

    const faqs = [
        {
            question: 'ÌîÑÎ°úÏ†ùÌä∏ Í∏∞Í∞ÑÏùÄ ÏñºÎßàÎÇò Í±∏Î¶¨ÎÇòÏöî?',
            answer: 'ÌîÑÎ°úÏ†ùÌä∏ Í∑úÎ™®ÏôÄ Î≥µÏû°ÏÑ±Ïóê Îî∞Îùº Îã§Î•¥ÏßÄÎßå, ÏùºÎ∞òÏ†ÅÏù∏ ÏõπÏÇ¨Ïù¥Ìä∏Îäî 4-8Ï£º, Î™®Î∞îÏùº Ïï±ÏùÄ 8-12Ï£º, Î≥µÏû°Ìïú Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÄ 12-16Ï£º Ï†ïÎèÑ ÏÜåÏöîÎê©ÎãàÎã§.'
        },
        {
            question: 'ÏòàÏÇ∞ Î≤îÏúÑÎäî Ïñ¥ÎñªÍ≤å ÎêòÎÇòÏöî?',
            answer: 'Í∞Å ÌîÑÎ°úÏ†ùÌä∏Îäî ÏöîÍµ¨ÏÇ¨Ìï≠Í≥º Í∏∞Îä•Ïóê Îî∞Îùº ÎπÑÏö©Ïù¥ Îã¨ÎùºÏßëÎãàÎã§. ÏÜåÍ∑úÎ™® ÏõπÏÇ¨Ïù¥Ìä∏Î∂ÄÌÑ∞ ÎåÄÍ∑úÎ™® ÏóîÌÑ∞ÌîÑÎùºÏù¥Ï¶à ÏÜîÎ£®ÏÖòÍπåÏßÄ Îã§ÏñëÌïú ÏòàÏÇ∞Ïóê ÎßûÏ∂ò ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌï©ÎãàÎã§.'
        },
        {
            question: 'Í∞úÎ∞ú ÌõÑ ÏßÄÏõêÏùÄ Ïñ¥ÎñªÍ≤å Ïù¥Î£®Ïñ¥ÏßÄÎÇòÏöî?',
            answer: 'Î™®Îì† ÌîÑÎ°úÏ†ùÌä∏Îäî 1Í∞úÏõîÍ∞ÑÏùò Î¨¥Î£å Ïú†ÏßÄÎ≥¥Ïàò Í∏∞Í∞ÑÏù¥ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏúºÎ©∞, Ïù¥ÌõÑÏóêÎäî ÏõîÎ≥Ñ ÎòêÎäî Ïó∞Í∞Ñ Ïú†ÏßÄÎ≥¥Ïàò Í≥ÑÏïΩÏùÑ ÌÜµÌï¥ ÏßÄÏõêÌï¥ ÎìúÎ¶ΩÎãàÎã§.'
        },
        {
            question: 'ÏÇ¨Ïö©ÌïòÎäî Í∏∞Ïà† Ïä§ÌÉùÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?',
            answer: 'ÏµúÏã† Í∏∞Ïà† Ìä∏Î†åÎìúÎ•º Î∞òÏòÅÌïú Îã§ÏñëÌïú Í∏∞Ïà† Ïä§ÌÉùÏùÑ ÌôúÏö©Ìï©ÎãàÎã§. ÌîÑÎ°†Ìä∏ÏóîÎìúÎäî React, Vue, Angular, Î∞±ÏóîÎìúÎäî Node.js, Python, PHP Îì±ÏùÑ ÌîÑÎ°úÏ†ùÌä∏Ïóê ÎßûÍ≤å ÏÇ¨Ïö©Ìï©ÎãàÎã§.'
        },
        {
            question: 'Í∞úÎ∞ú Í≥ºÏ†ïÏóê Í≥†Í∞ùÏù¥ Ï∞∏Ïó¨Ìï† Ïàò ÏûàÎÇòÏöî?',
            answer: 'ÎÑ§, Ï†ÄÌù¨Îäî Ïï†ÏûêÏùº Î∞©Î≤ïÎ°†ÏùÑ Îî∞Î•¥Î©∞ Í≥†Í∞ùÍ≥ºÏùò ÏßÄÏÜçÏ†ÅÏù∏ ÏÜåÌÜµÏùÑ Ï§ëÏöîÏãúÌï©ÎãàÎã§. 2Ï£º Îã®ÏúÑÏùò Ïä§ÌîÑÎ¶∞Ìä∏Î°ú Í∞úÎ∞úÏù¥ ÏßÑÌñâÎêòÎ©∞, Í∞Å Îã®Í≥ÑÎßàÎã§ ÏßÑÌñâ ÏÉÅÌô©ÏùÑ Í≥µÏú†ÌïòÍ≥† ÌîºÎìúÎ∞±ÏùÑ Î∞òÏòÅÌï©ÎãàÎã§.'
        }
    ];

    const toggleServiceExpand = (index: number) => {
        setExpandedServices(prev => ({
            ...prev,
            [index]: !prev[index]
        }));
    };

    return (
        <Layout title="ÏÑúÎπÑÏä§ - NQ Solution">
            {/* Hero Section */}
            <section className="py-20">
                <div className="container">
                    <div className="max-w-3xl mx-auto text-center">
                        <span className="badge bg-blue-100 text-blue-800">ÏÑúÎπÑÏä§</span>
                        <h1 className="mt-4 mb-4">ÎßûÏ∂§Ìòï ÏÜîÎ£®ÏÖò</h1>
                        <p className="text-xl text-gray-600">
                            ÎπÑÏ¶àÎãàÏä§ ÏÑ±Ïû•ÏùÑ ÏúÑÌïú ÎîîÏßÄÌÑ∏ ÏÑúÎπÑÏä§
                        </p>
                    </div>
                </div>
            </section>

            {/* Services */}
            <section className="section-padding">
                <div className="container">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-5xl mx-auto">
                        {services.map((service, index) => (
                            <div key={index} className="card">
                                <div className="p-6 bg-gradient-to-r from-blue-50 to-purple-50">
                                    <div className="flex items-start gap-4">
                                        <span className="text-5xl">{service.icon}</span>
                                        <div>
                                            <h3 className="text-2xl mb-2">{service.title}</h3>
                                            <p className="text-gray-600">{service.description}</p>
                                        </div>
                                    </div>
                                </div>

                                <div className="p-6">
                                    <ul className="space-y-2 mb-4">
                                        {service.features.slice(0, 2).map((feature, i) => (
                                            <li key={i} className="flex items-center gap-2">
                                                <span className="text-green-500">‚úì</span>
                                                {feature}
                                            </li>
                                        ))}
                                    </ul>

                                    {expandedServices[index] && (
                                        <div className="space-y-4 mt-4 animate-slide-down">
                                            <ul className="space-y-2">
                                                {service.features.slice(2).map((feature, i) => (
                                                    <li key={i} className="flex items-center gap-2">
                                                        <span className="text-green-500">‚úì</span>
                                                        {feature}
                                                    </li>
                                                ))}
                                            </ul>

                                            <div>
                                                <h4 className="font-semibold mb-2">ÏÇ¨Ïö© Í∏∞Ïà†</h4>
                                                <div className="flex flex-wrap gap-2">
                                                    {service.technologies.map((tech, i) => (
                                                        <span key={i} className="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full">
                                                            {tech}
                                                        </span>
                                                    ))}
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </div>

                                <div className="px-6 pb-6">
                                    <button
                                        className="w-full py-2 text-gray-600 hover:text-blue-600 transition-colors flex items-center justify-center gap-2"
                                        onClick={() => toggleServiceExpand(index)}
                                    >
                                        {expandedServices[index] ? 'Ï†ëÍ∏∞' : 'ÎçîÎ≥¥Í∏∞'}
                                        <span className={`transform transition-transform ${expandedServices[index] ? 'rotate-180' : ''}`}>
                                            ‚ñº
                                        </span>
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* Process */}
            <section className="section-padding bg-gray-50">
                <div className="container">
                    <div className="text-center mb-12">
                        <span className="badge bg-gray-200 text-gray-800">Í∞úÎ∞ú ÌîÑÎ°úÏÑ∏Ïä§</span>
                        <h2 className="mt-4 mb-4">ÌòëÏóÖ ÌîÑÎ°úÏÑ∏Ïä§</h2>
                        <p className="text-xl text-gray-600">
                            Ìà¨Î™ÖÌïòÍ≥† Ìö®Ïú®Ï†ÅÏù∏ ÌîÑÎ°úÏÑ∏Ïä§Î°ú ÏïÑÏù¥ÎîîÏñ¥Î•º ÌòÑÏã§Î°ú ÎßåÎì§Ïñ¥ ÎìúÎ¶ΩÎãàÎã§
                        </p>
                    </div>

                    <div className="relative max-w-5xl mx-auto">
                        <div className="hidden md:flex justify-between items-center">
                            {processSteps.map((step, index) => (
                                <div key={index} className="relative flex-1 text-center">
                                    <div className="w-12 h-12 gradient-bg text-white rounded-full flex items-center justify-center font-bold mx-auto mb-4">
                                        {step.number}
                                    </div>
                                    <h4 className="font-semibold mb-2">{step.title}</h4>
                                    <p className="text-sm text-gray-600 max-w-[150px] mx-auto">{step.description}</p>
                                    {index < processSteps.length - 1 && (
                                        <div className="absolute top-6 left-[60%] w-full h-0.5 bg-gray-300">
                                            <span className="absolute right-0 top-1/2 transform -translate-y-1/2 text-gray-400">‚Üí</span>
                                        </div>
                                    )}
                                </div>
                            ))}
                        </div>

                        <div className="md:hidden space-y-6">
                            {processSteps.map((step, index) => (
                                <div key={index} className="flex gap-4">
                                    <div className="w-10 h-10 gradient-bg text-white rounded-full flex items-center justify-center font-bold text-sm flex-shrink-0">
                                        {step.number}
                                    </div>
                                    <div>
                                        <h4 className="font-semibold mb-1">{step.title}</h4>
                                        <p className="text-sm text-gray-600">{step.description}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </section>

            {/* FAQ */}
            <section className="section-padding">
                <div className="container">
                    <div className="text-center mb-12">
                        <span className="badge bg-gray-200 text-gray-800">FAQ</span>
                        <h2 className="mt-4">ÏûêÏ£º Î¨ªÎäî ÏßàÎ¨∏</h2>
                    </div>

                    <div className="max-w-3xl mx-auto space-y-4">
                        {faqs.map((faq, index) => (
                            <div key={index} className="card">
                                <button
                                    className="w-full p-6 text-left flex items-center justify-between"
                                    onClick={() => setOpenFaq(openFaq === index ? null : index)}
                                >
                                    <span className="font-medium">{faq.question}</span>
                                    <span className={`transform transition-transform ${openFaq === index ? 'rotate-180' : ''}`}>
                                        ‚ñº
                                    </span>
                                </button>
                                {openFaq === index && (
                                    <div className="px-6 pb-6 text-gray-600 animate-slide-down">
                                        {faq.answer}
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* CTA */}
            <section className="section-padding">
                <div className="container">
                    <div className="gradient-bg rounded-3xl p-12 md:p-16 text-center text-white">
                        <h2 className="text-white mb-6">ÌîÑÎ°úÏ†ùÌä∏Î•º ÏãúÏûëÌï† Ï§ÄÎπÑÍ∞Ä ÎêòÏÖ®ÎÇòÏöî?</h2>
                        <p className="text-xl mb-8 opacity-90">
                            Î¨¥Î£å ÏÉÅÎã¥ÏùÑ ÌÜµÌï¥ Í∑ÄÌïòÏùò ÎπÑÏ¶àÎãàÏä§Ïóê ÎßûÎäî ÎßûÏ∂§Ìòï ÏÜîÎ£®ÏÖòÏùÑ ÏïåÏïÑÎ≥¥ÏÑ∏Ïöî
                        </p>
                        <a href="/contact" className="btn bg-white text-blue-600 hover:bg-gray-100">
                            Î¨¥Î£å ÏÉÅÎã¥ ÏòàÏïΩÌïòÍ∏∞
                        </a>
                    </div>
                </div>
            </section>
        </Layout>
    );
};

export default ServicesPage;